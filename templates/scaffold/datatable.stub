<?php

namespace $NAMESPACE_DATATABLES$;

use $NAMESPACE_MODEL$\$MODEL_NAME$;
use Yajra\DataTables\Services\DataTable;
use Yajra\DataTables\EloquentDataTable;

class $MODEL_NAME$DataTable extends DataTable
{
    /**
     * Build DataTable class.
     *
     * @param mixed $query Results from query() method.
     * @return \Yajra\DataTables\DataTableAbstract
     */
    public function dataTable($query)
    {
        $dataTable = new EloquentDataTable($query);

        return $dataTable->addColumn('action', '$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.datatables_actions');
    }

    /**
     * Get query source of dataTable.
     *
     * @param \App\Models\$MODEL_NAME$ $model
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function query($MODEL_NAME$ $model)
    {
        return $model->newQuery();
    }

    /**
     * Optional method if you want to use html builder.
     *
     * @return \Yajra\DataTables\Html\Builder
     */
    public function html()
    {
        return $this->builder()
            ->columns($this->getColumns())
            ->minifiedAjax()
            ->addAction(['width' => '120px', 'printable' => false])
            ->parameters([
                'dom'       => 'Bfrtip',
                'stateSave' => true,
                'order'     => [[0, 'desc']],
                'buttons'   => [
                    ['extend' => 'create', 'className' => 'btn btn-default btn-sm no-corner',],
                    ['extend' => 'export', 'className' => 'btn btn-default btn-sm no-corner',],
                    ['extend' => 'print', 'className' => 'btn btn-default btn-sm no-corner',],
                    ['extend' => 'reset', 'className' => 'btn btn-default btn-sm no-corner',],
                    ['extend' => 'reload', 'className' => 'btn btn-default btn-sm no-corner',],
                ],
                 'initComplete' => 'function() {
                                         var columns = this.api().init().columns;
                                        this.api().columns().every(function(index) {
                                            if (!columns[index] || columns[index].searchable) {
                                          
                                                var data=this.data().toArray();
                                                var column = this;

                                                var select = $("<select>", { "class": "form-control"});;
                                                $("<option/>", {"value": "",
                                                    "text": columns[index].title
                                                }).appendTo(select);
                                                
                                                var uniqueData = data.filter(function(itm, i, data) {
                                                    return i == data.indexOf(itm);
                                                });
                                                uniqueData.forEach(val => {
                                                    $("<option/>", {
                                                        "value": val,
                                                        "text": val
                                                    }).appendTo(select);
                                                });
                                                $(select).appendTo($(column.header()).empty())
                                                .on("keyup change", function() {
                                                    var term =  $(this).val()!="" ? $(this).val() : "";
                                                    column.search(term,  false, false, true).draw();
                                                        
                                                    
                                                });
                                            }
                                        })  
                                    }'
            ]);
    }

    /**
     * Get columns.
     *
     * @return array
     */
    protected function getColumns()
    {
        return [
            $DATATABLE_COLUMNS$
        ];
    }

    /**
     * Get filename for export.
     *
     * @return string
     */
    protected function filename()
    {
        return '$MODEL_NAME_PLURAL_SNAKE$_datatable_' . time();
    }
}
